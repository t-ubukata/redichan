{"ast":null,"code":"'use strict';\n\nconst color = require('color');\nconst is = require('./is');\nconst sharp = require('./sharp');\n\n/**\n * Extract input options, if any, from an object.\n * @private\n */\nfunction _inputOptionsFromObject(obj) {\n  const {\n    raw,\n    density,\n    limitInputPixels,\n    unlimited,\n    sequentialRead,\n    failOn,\n    failOnError,\n    animated,\n    page,\n    pages,\n    subifd\n  } = obj;\n  return [raw, density, limitInputPixels, unlimited, sequentialRead, failOn, failOnError, animated, page, pages, subifd].some(is.defined) ? {\n    raw,\n    density,\n    limitInputPixels,\n    unlimited,\n    sequentialRead,\n    failOn,\n    failOnError,\n    animated,\n    page,\n    pages,\n    subifd\n  } : undefined;\n}\n\n/**\n * Create Object containing input and input-related options.\n * @private\n */\nfunction _createInputDescriptor(input, inputOptions, containerOptions) {\n  const inputDescriptor = {\n    failOn: 'warning',\n    limitInputPixels: Math.pow(0x3FFF, 2),\n    unlimited: false,\n    sequentialRead: false\n  };\n  if (is.string(input)) {\n    // filesystem\n    inputDescriptor.file = input;\n  } else if (is.buffer(input)) {\n    // Buffer\n    if (input.length === 0) {\n      throw Error('Input Buffer is empty');\n    }\n    inputDescriptor.buffer = input;\n  } else if (is.typedArray(input)) {\n    if (input.length === 0) {\n      throw Error('Input Bit Array is empty');\n    }\n    inputDescriptor.buffer = Buffer.from(input.buffer, input.byteOffset, input.byteLength);\n  } else if (is.plainObject(input) && !is.defined(inputOptions)) {\n    // Plain Object descriptor, e.g. create\n    inputOptions = input;\n    if (_inputOptionsFromObject(inputOptions)) {\n      // Stream with options\n      inputDescriptor.buffer = [];\n    }\n  } else if (!is.defined(input) && !is.defined(inputOptions) && is.object(containerOptions) && containerOptions.allowStream) {\n    // Stream without options\n    inputDescriptor.buffer = [];\n  } else {\n    throw new Error(`Unsupported input '${input}' of type ${typeof input}${is.defined(inputOptions) ? ` when also providing options of type ${typeof inputOptions}` : ''}`);\n  }\n  if (is.object(inputOptions)) {\n    // Deprecated: failOnError\n    if (is.defined(inputOptions.failOnError)) {\n      if (is.bool(inputOptions.failOnError)) {\n        inputDescriptor.failOn = inputOptions.failOnError ? 'warning' : 'none';\n      } else {\n        throw is.invalidParameterError('failOnError', 'boolean', inputOptions.failOnError);\n      }\n    }\n    // failOn\n    if (is.defined(inputOptions.failOn)) {\n      if (is.string(inputOptions.failOn) && is.inArray(inputOptions.failOn, ['none', 'truncated', 'error', 'warning'])) {\n        inputDescriptor.failOn = inputOptions.failOn;\n      } else {\n        throw is.invalidParameterError('failOn', 'one of: none, truncated, error, warning', inputOptions.failOn);\n      }\n    }\n    // Density\n    if (is.defined(inputOptions.density)) {\n      if (is.inRange(inputOptions.density, 1, 100000)) {\n        inputDescriptor.density = inputOptions.density;\n      } else {\n        throw is.invalidParameterError('density', 'number between 1 and 100000', inputOptions.density);\n      }\n    }\n    // limitInputPixels\n    if (is.defined(inputOptions.limitInputPixels)) {\n      if (is.bool(inputOptions.limitInputPixels)) {\n        inputDescriptor.limitInputPixels = inputOptions.limitInputPixels ? Math.pow(0x3FFF, 2) : 0;\n      } else if (is.integer(inputOptions.limitInputPixels) && is.inRange(inputOptions.limitInputPixels, 0, Number.MAX_SAFE_INTEGER)) {\n        inputDescriptor.limitInputPixels = inputOptions.limitInputPixels;\n      } else {\n        throw is.invalidParameterError('limitInputPixels', 'positive integer', inputOptions.limitInputPixels);\n      }\n    }\n    // unlimited\n    if (is.defined(inputOptions.unlimited)) {\n      if (is.bool(inputOptions.unlimited)) {\n        inputDescriptor.unlimited = inputOptions.unlimited;\n      } else {\n        throw is.invalidParameterError('unlimited', 'boolean', inputOptions.unlimited);\n      }\n    }\n    // sequentialRead\n    if (is.defined(inputOptions.sequentialRead)) {\n      if (is.bool(inputOptions.sequentialRead)) {\n        inputDescriptor.sequentialRead = inputOptions.sequentialRead;\n      } else {\n        throw is.invalidParameterError('sequentialRead', 'boolean', inputOptions.sequentialRead);\n      }\n    }\n    // Raw pixel input\n    if (is.defined(inputOptions.raw)) {\n      if (is.object(inputOptions.raw) && is.integer(inputOptions.raw.width) && inputOptions.raw.width > 0 && is.integer(inputOptions.raw.height) && inputOptions.raw.height > 0 && is.integer(inputOptions.raw.channels) && is.inRange(inputOptions.raw.channels, 1, 4)) {\n        inputDescriptor.rawWidth = inputOptions.raw.width;\n        inputDescriptor.rawHeight = inputOptions.raw.height;\n        inputDescriptor.rawChannels = inputOptions.raw.channels;\n        inputDescriptor.rawPremultiplied = !!inputOptions.raw.premultiplied;\n        switch (input.constructor) {\n          case Uint8Array:\n          case Uint8ClampedArray:\n            inputDescriptor.rawDepth = 'uchar';\n            break;\n          case Int8Array:\n            inputDescriptor.rawDepth = 'char';\n            break;\n          case Uint16Array:\n            inputDescriptor.rawDepth = 'ushort';\n            break;\n          case Int16Array:\n            inputDescriptor.rawDepth = 'short';\n            break;\n          case Uint32Array:\n            inputDescriptor.rawDepth = 'uint';\n            break;\n          case Int32Array:\n            inputDescriptor.rawDepth = 'int';\n            break;\n          case Float32Array:\n            inputDescriptor.rawDepth = 'float';\n            break;\n          case Float64Array:\n            inputDescriptor.rawDepth = 'double';\n            break;\n          default:\n            inputDescriptor.rawDepth = 'uchar';\n            break;\n        }\n      } else {\n        throw new Error('Expected width, height and channels for raw pixel input');\n      }\n    }\n    // Multi-page input (GIF, TIFF, PDF)\n    if (is.defined(inputOptions.animated)) {\n      if (is.bool(inputOptions.animated)) {\n        inputDescriptor.pages = inputOptions.animated ? -1 : 1;\n      } else {\n        throw is.invalidParameterError('animated', 'boolean', inputOptions.animated);\n      }\n    }\n    if (is.defined(inputOptions.pages)) {\n      if (is.integer(inputOptions.pages) && is.inRange(inputOptions.pages, -1, 100000)) {\n        inputDescriptor.pages = inputOptions.pages;\n      } else {\n        throw is.invalidParameterError('pages', 'integer between -1 and 100000', inputOptions.pages);\n      }\n    }\n    if (is.defined(inputOptions.page)) {\n      if (is.integer(inputOptions.page) && is.inRange(inputOptions.page, 0, 100000)) {\n        inputDescriptor.page = inputOptions.page;\n      } else {\n        throw is.invalidParameterError('page', 'integer between 0 and 100000', inputOptions.page);\n      }\n    }\n    // Multi-level input (OpenSlide)\n    if (is.defined(inputOptions.level)) {\n      if (is.integer(inputOptions.level) && is.inRange(inputOptions.level, 0, 256)) {\n        inputDescriptor.level = inputOptions.level;\n      } else {\n        throw is.invalidParameterError('level', 'integer between 0 and 256', inputOptions.level);\n      }\n    }\n    // Sub Image File Directory (TIFF)\n    if (is.defined(inputOptions.subifd)) {\n      if (is.integer(inputOptions.subifd) && is.inRange(inputOptions.subifd, -1, 100000)) {\n        inputDescriptor.subifd = inputOptions.subifd;\n      } else {\n        throw is.invalidParameterError('subifd', 'integer between -1 and 100000', inputOptions.subifd);\n      }\n    }\n    // Create new image\n    if (is.defined(inputOptions.create)) {\n      if (is.object(inputOptions.create) && is.integer(inputOptions.create.width) && inputOptions.create.width > 0 && is.integer(inputOptions.create.height) && inputOptions.create.height > 0 && is.integer(inputOptions.create.channels)) {\n        inputDescriptor.createWidth = inputOptions.create.width;\n        inputDescriptor.createHeight = inputOptions.create.height;\n        inputDescriptor.createChannels = inputOptions.create.channels;\n        // Noise\n        if (is.defined(inputOptions.create.noise)) {\n          if (!is.object(inputOptions.create.noise)) {\n            throw new Error('Expected noise to be an object');\n          }\n          if (!is.inArray(inputOptions.create.noise.type, ['gaussian'])) {\n            throw new Error('Only gaussian noise is supported at the moment');\n          }\n          if (!is.inRange(inputOptions.create.channels, 1, 4)) {\n            throw is.invalidParameterError('create.channels', 'number between 1 and 4', inputOptions.create.channels);\n          }\n          inputDescriptor.createNoiseType = inputOptions.create.noise.type;\n          if (is.number(inputOptions.create.noise.mean) && is.inRange(inputOptions.create.noise.mean, 0, 10000)) {\n            inputDescriptor.createNoiseMean = inputOptions.create.noise.mean;\n          } else {\n            throw is.invalidParameterError('create.noise.mean', 'number between 0 and 10000', inputOptions.create.noise.mean);\n          }\n          if (is.number(inputOptions.create.noise.sigma) && is.inRange(inputOptions.create.noise.sigma, 0, 10000)) {\n            inputDescriptor.createNoiseSigma = inputOptions.create.noise.sigma;\n          } else {\n            throw is.invalidParameterError('create.noise.sigma', 'number between 0 and 10000', inputOptions.create.noise.sigma);\n          }\n        } else if (is.defined(inputOptions.create.background)) {\n          if (!is.inRange(inputOptions.create.channels, 3, 4)) {\n            throw is.invalidParameterError('create.channels', 'number between 3 and 4', inputOptions.create.channels);\n          }\n          const background = color(inputOptions.create.background);\n          inputDescriptor.createBackground = [background.red(), background.green(), background.blue(), Math.round(background.alpha() * 255)];\n        } else {\n          throw new Error('Expected valid noise or background to create a new input image');\n        }\n        delete inputDescriptor.buffer;\n      } else {\n        throw new Error('Expected valid width, height and channels to create a new input image');\n      }\n    }\n  } else if (is.defined(inputOptions)) {\n    throw new Error('Invalid input options ' + inputOptions);\n  }\n  return inputDescriptor;\n}\n\n/**\n * Handle incoming Buffer chunk on Writable Stream.\n * @private\n * @param {Buffer} chunk\n * @param {string} encoding - unused\n * @param {Function} callback\n */\nfunction _write(chunk, encoding, callback) {\n  /* istanbul ignore else */\n  if (Array.isArray(this.options.input.buffer)) {\n    /* istanbul ignore else */\n    if (is.buffer(chunk)) {\n      if (this.options.input.buffer.length === 0) {\n        this.on('finish', () => {\n          this.streamInFinished = true;\n        });\n      }\n      this.options.input.buffer.push(chunk);\n      callback();\n    } else {\n      callback(new Error('Non-Buffer data on Writable Stream'));\n    }\n  } else {\n    callback(new Error('Unexpected data on Writable Stream'));\n  }\n}\n\n/**\n * Flattens the array of chunks accumulated in input.buffer.\n * @private\n */\nfunction _flattenBufferIn() {\n  if (this._isStreamInput()) {\n    this.options.input.buffer = Buffer.concat(this.options.input.buffer);\n  }\n}\n\n/**\n * Are we expecting Stream-based input?\n * @private\n * @returns {boolean}\n */\nfunction _isStreamInput() {\n  return Array.isArray(this.options.input.buffer);\n}\n\n/**\n * Fast access to (uncached) image metadata without decoding any compressed pixel data.\n *\n * This is taken from the header of the input image.\n * It does not include operations, such as resize, to be applied to the output image.\n *\n * A `Promise` is returned when `callback` is not provided.\n *\n * - `format`: Name of decoder used to decompress image data e.g. `jpeg`, `png`, `webp`, `gif`, `svg`\n * - `size`: Total size of image in bytes, for Stream and Buffer input only\n * - `width`: Number of pixels wide (EXIF orientation is not taken into consideration, see example below)\n * - `height`: Number of pixels high (EXIF orientation is not taken into consideration, see example below)\n * - `space`: Name of colour space interpretation e.g. `srgb`, `rgb`, `cmyk`, `lab`, `b-w` [...](https://www.libvips.org/API/current/VipsImage.html#VipsInterpretation)\n * - `channels`: Number of bands e.g. `3` for sRGB, `4` for CMYK\n * - `depth`: Name of pixel depth format e.g. `uchar`, `char`, `ushort`, `float` [...](https://www.libvips.org/API/current/VipsImage.html#VipsBandFormat)\n * - `density`: Number of pixels per inch (DPI), if present\n * - `chromaSubsampling`: String containing JPEG chroma subsampling, `4:2:0` or `4:4:4` for RGB, `4:2:0:4` or `4:4:4:4` for CMYK\n * - `isProgressive`: Boolean indicating whether the image is interlaced using a progressive scan\n * - `pages`: Number of pages/frames contained within the image, with support for TIFF, HEIF, PDF, animated GIF and animated WebP\n * - `pageHeight`: Number of pixels high each page in a multi-page image will be.\n * - `loop`: Number of times to loop an animated image, zero refers to a continuous loop.\n * - `delay`: Delay in ms between each page in an animated image, provided as an array of integers.\n * - `pagePrimary`: Number of the primary page in a HEIF image\n * - `levels`: Details of each level in a multi-level image provided as an array of objects, requires libvips compiled with support for OpenSlide\n * - `subifds`: Number of Sub Image File Directories in an OME-TIFF image\n * - `background`: Default background colour, if present, for PNG (bKGD) and GIF images, either an RGB Object or a single greyscale value\n * - `compression`: The encoder used to compress an HEIF file, `av1` (AVIF) or `hevc` (HEIC)\n * - `resolutionUnit`: The unit of resolution (density), either `inch` or `cm`, if present\n * - `hasProfile`: Boolean indicating the presence of an embedded ICC profile\n * - `hasAlpha`: Boolean indicating the presence of an alpha transparency channel\n * - `orientation`: Number value of the EXIF Orientation header, if present\n * - `exif`: Buffer containing raw EXIF data, if present\n * - `icc`: Buffer containing raw [ICC](https://www.npmjs.com/package/icc) profile data, if present\n * - `iptc`: Buffer containing raw IPTC data, if present\n * - `xmp`: Buffer containing raw XMP data, if present\n * - `tifftagPhotoshop`: Buffer containing raw TIFFTAG_PHOTOSHOP data, if present\n *\n * @example\n * const metadata = await sharp(input).metadata();\n *\n * @example\n * const image = sharp(inputJpg);\n * image\n *   .metadata()\n *   .then(function(metadata) {\n *     return image\n *       .resize(Math.round(metadata.width / 2))\n *       .webp()\n *       .toBuffer();\n *   })\n *   .then(function(data) {\n *     // data contains a WebP image half the width and height of the original JPEG\n *   });\n *\n * @example\n * // Based on EXIF rotation metadata, get the right-side-up width and height:\n *\n * const size = getNormalSize(await sharp(input).metadata());\n *\n * function getNormalSize({ width, height, orientation }) {\n *   return (orientation || 0) >= 5\n *     ? { width: height, height: width }\n *     : { width, height };\n * }\n *\n * @param {Function} [callback] - called with the arguments `(err, metadata)`\n * @returns {Promise<Object>|Sharp}\n */\nfunction metadata(callback) {\n  if (is.fn(callback)) {\n    if (this._isStreamInput()) {\n      this.on('finish', () => {\n        this._flattenBufferIn();\n        sharp.metadata(this.options, callback);\n      });\n    } else {\n      sharp.metadata(this.options, callback);\n    }\n    return this;\n  } else {\n    if (this._isStreamInput()) {\n      return new Promise((resolve, reject) => {\n        this.on('finish', () => {\n          this._flattenBufferIn();\n          sharp.metadata(this.options, (err, metadata) => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(metadata);\n            }\n          });\n        });\n      });\n    } else {\n      return new Promise((resolve, reject) => {\n        sharp.metadata(this.options, (err, metadata) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(metadata);\n          }\n        });\n      });\n    }\n  }\n}\n\n/**\n * Access to pixel-derived image statistics for every channel in the image.\n * A `Promise` is returned when `callback` is not provided.\n *\n * - `channels`: Array of channel statistics for each channel in the image. Each channel statistic contains\n *     - `min` (minimum value in the channel)\n *     - `max` (maximum value in the channel)\n *     - `sum` (sum of all values in a channel)\n *     - `squaresSum` (sum of squared values in a channel)\n *     - `mean` (mean of the values in a channel)\n *     - `stdev` (standard deviation for the values in a channel)\n *     - `minX` (x-coordinate of one of the pixel where the minimum lies)\n *     - `minY` (y-coordinate of one of the pixel where the minimum lies)\n *     - `maxX` (x-coordinate of one of the pixel where the maximum lies)\n *     - `maxY` (y-coordinate of one of the pixel where the maximum lies)\n * - `isOpaque`: Is the image fully opaque? Will be `true` if the image has no alpha channel or if every pixel is fully opaque.\n * - `entropy`: Histogram-based estimation of greyscale entropy, discarding alpha channel if any.\n * - `sharpness`: Estimation of greyscale sharpness based on the standard deviation of a Laplacian convolution, discarding alpha channel if any.\n * - `dominant`: Object containing most dominant sRGB colour based on a 4096-bin 3D histogram.\n *\n * **Note**: Statistics are derived from the original input image. Any operations performed on the image must first be\n * written to a buffer in order to run `stats` on the result (see third example).\n *\n * @example\n * const image = sharp(inputJpg);\n * image\n *   .stats()\n *   .then(function(stats) {\n *      // stats contains the channel-wise statistics array and the isOpaque value\n *   });\n *\n * @example\n * const { entropy, sharpness, dominant } = await sharp(input).stats();\n * const { r, g, b } = dominant;\n *\n * @example\n * const image = sharp(input);\n * // store intermediate result\n * const part = await image.extract(region).toBuffer();\n * // create new instance to obtain statistics of extracted region\n * const stats = await sharp(part).stats();\n *\n * @param {Function} [callback] - called with the arguments `(err, stats)`\n * @returns {Promise<Object>}\n */\nfunction stats(callback) {\n  if (is.fn(callback)) {\n    if (this._isStreamInput()) {\n      this.on('finish', () => {\n        this._flattenBufferIn();\n        sharp.stats(this.options, callback);\n      });\n    } else {\n      sharp.stats(this.options, callback);\n    }\n    return this;\n  } else {\n    if (this._isStreamInput()) {\n      return new Promise((resolve, reject) => {\n        this.on('finish', function () {\n          this._flattenBufferIn();\n          sharp.stats(this.options, (err, stats) => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(stats);\n            }\n          });\n        });\n      });\n    } else {\n      return new Promise((resolve, reject) => {\n        sharp.stats(this.options, (err, stats) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(stats);\n          }\n        });\n      });\n    }\n  }\n}\n\n/**\n * Decorate the Sharp prototype with input-related functions.\n * @private\n */\nmodule.exports = function (Sharp) {\n  Object.assign(Sharp.prototype, {\n    // Private\n    _inputOptionsFromObject,\n    _createInputDescriptor,\n    _write,\n    _flattenBufferIn,\n    _isStreamInput,\n    // Public\n    metadata,\n    stats\n  });\n};","map":{"version":3,"names":["color","require","is","sharp","_inputOptionsFromObject","obj","raw","density","limitInputPixels","unlimited","sequentialRead","failOn","failOnError","animated","page","pages","subifd","some","defined","undefined","_createInputDescriptor","input","inputOptions","containerOptions","inputDescriptor","Math","pow","string","file","buffer","length","Error","typedArray","Buffer","from","byteOffset","byteLength","plainObject","object","allowStream","bool","invalidParameterError","inArray","inRange","integer","Number","MAX_SAFE_INTEGER","width","height","channels","rawWidth","rawHeight","rawChannels","rawPremultiplied","premultiplied","constructor","Uint8Array","Uint8ClampedArray","rawDepth","Int8Array","Uint16Array","Int16Array","Uint32Array","Int32Array","Float32Array","Float64Array","level","create","createWidth","createHeight","createChannels","noise","type","createNoiseType","number","mean","createNoiseMean","sigma","createNoiseSigma","background","createBackground","red","green","blue","round","alpha","_write","chunk","encoding","callback","Array","isArray","options","on","streamInFinished","push","_flattenBufferIn","_isStreamInput","concat","metadata","fn","Promise","resolve","reject","err","stats","module","exports","Sharp","Object","assign","prototype"],"sources":["/Users/admin/project/redichan_frontend/node_modules/sharp/lib/input.js"],"sourcesContent":["'use strict';\n\nconst color = require('color');\nconst is = require('./is');\nconst sharp = require('./sharp');\n\n/**\n * Extract input options, if any, from an object.\n * @private\n */\nfunction _inputOptionsFromObject (obj) {\n  const { raw, density, limitInputPixels, unlimited, sequentialRead, failOn, failOnError, animated, page, pages, subifd } = obj;\n  return [raw, density, limitInputPixels, unlimited, sequentialRead, failOn, failOnError, animated, page, pages, subifd].some(is.defined)\n    ? { raw, density, limitInputPixels, unlimited, sequentialRead, failOn, failOnError, animated, page, pages, subifd }\n    : undefined;\n}\n\n/**\n * Create Object containing input and input-related options.\n * @private\n */\nfunction _createInputDescriptor (input, inputOptions, containerOptions) {\n  const inputDescriptor = {\n    failOn: 'warning',\n    limitInputPixels: Math.pow(0x3FFF, 2),\n    unlimited: false,\n    sequentialRead: false\n  };\n  if (is.string(input)) {\n    // filesystem\n    inputDescriptor.file = input;\n  } else if (is.buffer(input)) {\n    // Buffer\n    if (input.length === 0) {\n      throw Error('Input Buffer is empty');\n    }\n    inputDescriptor.buffer = input;\n  } else if (is.typedArray(input)) {\n    if (input.length === 0) {\n      throw Error('Input Bit Array is empty');\n    }\n    inputDescriptor.buffer = Buffer.from(input.buffer, input.byteOffset, input.byteLength);\n  } else if (is.plainObject(input) && !is.defined(inputOptions)) {\n    // Plain Object descriptor, e.g. create\n    inputOptions = input;\n    if (_inputOptionsFromObject(inputOptions)) {\n      // Stream with options\n      inputDescriptor.buffer = [];\n    }\n  } else if (!is.defined(input) && !is.defined(inputOptions) && is.object(containerOptions) && containerOptions.allowStream) {\n    // Stream without options\n    inputDescriptor.buffer = [];\n  } else {\n    throw new Error(`Unsupported input '${input}' of type ${typeof input}${\n      is.defined(inputOptions) ? ` when also providing options of type ${typeof inputOptions}` : ''\n    }`);\n  }\n  if (is.object(inputOptions)) {\n    // Deprecated: failOnError\n    if (is.defined(inputOptions.failOnError)) {\n      if (is.bool(inputOptions.failOnError)) {\n        inputDescriptor.failOn = inputOptions.failOnError ? 'warning' : 'none';\n      } else {\n        throw is.invalidParameterError('failOnError', 'boolean', inputOptions.failOnError);\n      }\n    }\n    // failOn\n    if (is.defined(inputOptions.failOn)) {\n      if (is.string(inputOptions.failOn) && is.inArray(inputOptions.failOn, ['none', 'truncated', 'error', 'warning'])) {\n        inputDescriptor.failOn = inputOptions.failOn;\n      } else {\n        throw is.invalidParameterError('failOn', 'one of: none, truncated, error, warning', inputOptions.failOn);\n      }\n    }\n    // Density\n    if (is.defined(inputOptions.density)) {\n      if (is.inRange(inputOptions.density, 1, 100000)) {\n        inputDescriptor.density = inputOptions.density;\n      } else {\n        throw is.invalidParameterError('density', 'number between 1 and 100000', inputOptions.density);\n      }\n    }\n    // limitInputPixels\n    if (is.defined(inputOptions.limitInputPixels)) {\n      if (is.bool(inputOptions.limitInputPixels)) {\n        inputDescriptor.limitInputPixels = inputOptions.limitInputPixels\n          ? Math.pow(0x3FFF, 2)\n          : 0;\n      } else if (is.integer(inputOptions.limitInputPixels) && is.inRange(inputOptions.limitInputPixels, 0, Number.MAX_SAFE_INTEGER)) {\n        inputDescriptor.limitInputPixels = inputOptions.limitInputPixels;\n      } else {\n        throw is.invalidParameterError('limitInputPixels', 'positive integer', inputOptions.limitInputPixels);\n      }\n    }\n    // unlimited\n    if (is.defined(inputOptions.unlimited)) {\n      if (is.bool(inputOptions.unlimited)) {\n        inputDescriptor.unlimited = inputOptions.unlimited;\n      } else {\n        throw is.invalidParameterError('unlimited', 'boolean', inputOptions.unlimited);\n      }\n    }\n    // sequentialRead\n    if (is.defined(inputOptions.sequentialRead)) {\n      if (is.bool(inputOptions.sequentialRead)) {\n        inputDescriptor.sequentialRead = inputOptions.sequentialRead;\n      } else {\n        throw is.invalidParameterError('sequentialRead', 'boolean', inputOptions.sequentialRead);\n      }\n    }\n    // Raw pixel input\n    if (is.defined(inputOptions.raw)) {\n      if (\n        is.object(inputOptions.raw) &&\n        is.integer(inputOptions.raw.width) && inputOptions.raw.width > 0 &&\n        is.integer(inputOptions.raw.height) && inputOptions.raw.height > 0 &&\n        is.integer(inputOptions.raw.channels) && is.inRange(inputOptions.raw.channels, 1, 4)\n      ) {\n        inputDescriptor.rawWidth = inputOptions.raw.width;\n        inputDescriptor.rawHeight = inputOptions.raw.height;\n        inputDescriptor.rawChannels = inputOptions.raw.channels;\n        inputDescriptor.rawPremultiplied = !!inputOptions.raw.premultiplied;\n\n        switch (input.constructor) {\n          case Uint8Array:\n          case Uint8ClampedArray:\n            inputDescriptor.rawDepth = 'uchar';\n            break;\n          case Int8Array:\n            inputDescriptor.rawDepth = 'char';\n            break;\n          case Uint16Array:\n            inputDescriptor.rawDepth = 'ushort';\n            break;\n          case Int16Array:\n            inputDescriptor.rawDepth = 'short';\n            break;\n          case Uint32Array:\n            inputDescriptor.rawDepth = 'uint';\n            break;\n          case Int32Array:\n            inputDescriptor.rawDepth = 'int';\n            break;\n          case Float32Array:\n            inputDescriptor.rawDepth = 'float';\n            break;\n          case Float64Array:\n            inputDescriptor.rawDepth = 'double';\n            break;\n          default:\n            inputDescriptor.rawDepth = 'uchar';\n            break;\n        }\n      } else {\n        throw new Error('Expected width, height and channels for raw pixel input');\n      }\n    }\n    // Multi-page input (GIF, TIFF, PDF)\n    if (is.defined(inputOptions.animated)) {\n      if (is.bool(inputOptions.animated)) {\n        inputDescriptor.pages = inputOptions.animated ? -1 : 1;\n      } else {\n        throw is.invalidParameterError('animated', 'boolean', inputOptions.animated);\n      }\n    }\n    if (is.defined(inputOptions.pages)) {\n      if (is.integer(inputOptions.pages) && is.inRange(inputOptions.pages, -1, 100000)) {\n        inputDescriptor.pages = inputOptions.pages;\n      } else {\n        throw is.invalidParameterError('pages', 'integer between -1 and 100000', inputOptions.pages);\n      }\n    }\n    if (is.defined(inputOptions.page)) {\n      if (is.integer(inputOptions.page) && is.inRange(inputOptions.page, 0, 100000)) {\n        inputDescriptor.page = inputOptions.page;\n      } else {\n        throw is.invalidParameterError('page', 'integer between 0 and 100000', inputOptions.page);\n      }\n    }\n    // Multi-level input (OpenSlide)\n    if (is.defined(inputOptions.level)) {\n      if (is.integer(inputOptions.level) && is.inRange(inputOptions.level, 0, 256)) {\n        inputDescriptor.level = inputOptions.level;\n      } else {\n        throw is.invalidParameterError('level', 'integer between 0 and 256', inputOptions.level);\n      }\n    }\n    // Sub Image File Directory (TIFF)\n    if (is.defined(inputOptions.subifd)) {\n      if (is.integer(inputOptions.subifd) && is.inRange(inputOptions.subifd, -1, 100000)) {\n        inputDescriptor.subifd = inputOptions.subifd;\n      } else {\n        throw is.invalidParameterError('subifd', 'integer between -1 and 100000', inputOptions.subifd);\n      }\n    }\n    // Create new image\n    if (is.defined(inputOptions.create)) {\n      if (\n        is.object(inputOptions.create) &&\n        is.integer(inputOptions.create.width) && inputOptions.create.width > 0 &&\n        is.integer(inputOptions.create.height) && inputOptions.create.height > 0 &&\n        is.integer(inputOptions.create.channels)\n      ) {\n        inputDescriptor.createWidth = inputOptions.create.width;\n        inputDescriptor.createHeight = inputOptions.create.height;\n        inputDescriptor.createChannels = inputOptions.create.channels;\n        // Noise\n        if (is.defined(inputOptions.create.noise)) {\n          if (!is.object(inputOptions.create.noise)) {\n            throw new Error('Expected noise to be an object');\n          }\n          if (!is.inArray(inputOptions.create.noise.type, ['gaussian'])) {\n            throw new Error('Only gaussian noise is supported at the moment');\n          }\n          if (!is.inRange(inputOptions.create.channels, 1, 4)) {\n            throw is.invalidParameterError('create.channels', 'number between 1 and 4', inputOptions.create.channels);\n          }\n          inputDescriptor.createNoiseType = inputOptions.create.noise.type;\n          if (is.number(inputOptions.create.noise.mean) && is.inRange(inputOptions.create.noise.mean, 0, 10000)) {\n            inputDescriptor.createNoiseMean = inputOptions.create.noise.mean;\n          } else {\n            throw is.invalidParameterError('create.noise.mean', 'number between 0 and 10000', inputOptions.create.noise.mean);\n          }\n          if (is.number(inputOptions.create.noise.sigma) && is.inRange(inputOptions.create.noise.sigma, 0, 10000)) {\n            inputDescriptor.createNoiseSigma = inputOptions.create.noise.sigma;\n          } else {\n            throw is.invalidParameterError('create.noise.sigma', 'number between 0 and 10000', inputOptions.create.noise.sigma);\n          }\n        } else if (is.defined(inputOptions.create.background)) {\n          if (!is.inRange(inputOptions.create.channels, 3, 4)) {\n            throw is.invalidParameterError('create.channels', 'number between 3 and 4', inputOptions.create.channels);\n          }\n          const background = color(inputOptions.create.background);\n          inputDescriptor.createBackground = [\n            background.red(),\n            background.green(),\n            background.blue(),\n            Math.round(background.alpha() * 255)\n          ];\n        } else {\n          throw new Error('Expected valid noise or background to create a new input image');\n        }\n        delete inputDescriptor.buffer;\n      } else {\n        throw new Error('Expected valid width, height and channels to create a new input image');\n      }\n    }\n  } else if (is.defined(inputOptions)) {\n    throw new Error('Invalid input options ' + inputOptions);\n  }\n  return inputDescriptor;\n}\n\n/**\n * Handle incoming Buffer chunk on Writable Stream.\n * @private\n * @param {Buffer} chunk\n * @param {string} encoding - unused\n * @param {Function} callback\n */\nfunction _write (chunk, encoding, callback) {\n  /* istanbul ignore else */\n  if (Array.isArray(this.options.input.buffer)) {\n    /* istanbul ignore else */\n    if (is.buffer(chunk)) {\n      if (this.options.input.buffer.length === 0) {\n        this.on('finish', () => {\n          this.streamInFinished = true;\n        });\n      }\n      this.options.input.buffer.push(chunk);\n      callback();\n    } else {\n      callback(new Error('Non-Buffer data on Writable Stream'));\n    }\n  } else {\n    callback(new Error('Unexpected data on Writable Stream'));\n  }\n}\n\n/**\n * Flattens the array of chunks accumulated in input.buffer.\n * @private\n */\nfunction _flattenBufferIn () {\n  if (this._isStreamInput()) {\n    this.options.input.buffer = Buffer.concat(this.options.input.buffer);\n  }\n}\n\n/**\n * Are we expecting Stream-based input?\n * @private\n * @returns {boolean}\n */\nfunction _isStreamInput () {\n  return Array.isArray(this.options.input.buffer);\n}\n\n/**\n * Fast access to (uncached) image metadata without decoding any compressed pixel data.\n *\n * This is taken from the header of the input image.\n * It does not include operations, such as resize, to be applied to the output image.\n *\n * A `Promise` is returned when `callback` is not provided.\n *\n * - `format`: Name of decoder used to decompress image data e.g. `jpeg`, `png`, `webp`, `gif`, `svg`\n * - `size`: Total size of image in bytes, for Stream and Buffer input only\n * - `width`: Number of pixels wide (EXIF orientation is not taken into consideration, see example below)\n * - `height`: Number of pixels high (EXIF orientation is not taken into consideration, see example below)\n * - `space`: Name of colour space interpretation e.g. `srgb`, `rgb`, `cmyk`, `lab`, `b-w` [...](https://www.libvips.org/API/current/VipsImage.html#VipsInterpretation)\n * - `channels`: Number of bands e.g. `3` for sRGB, `4` for CMYK\n * - `depth`: Name of pixel depth format e.g. `uchar`, `char`, `ushort`, `float` [...](https://www.libvips.org/API/current/VipsImage.html#VipsBandFormat)\n * - `density`: Number of pixels per inch (DPI), if present\n * - `chromaSubsampling`: String containing JPEG chroma subsampling, `4:2:0` or `4:4:4` for RGB, `4:2:0:4` or `4:4:4:4` for CMYK\n * - `isProgressive`: Boolean indicating whether the image is interlaced using a progressive scan\n * - `pages`: Number of pages/frames contained within the image, with support for TIFF, HEIF, PDF, animated GIF and animated WebP\n * - `pageHeight`: Number of pixels high each page in a multi-page image will be.\n * - `loop`: Number of times to loop an animated image, zero refers to a continuous loop.\n * - `delay`: Delay in ms between each page in an animated image, provided as an array of integers.\n * - `pagePrimary`: Number of the primary page in a HEIF image\n * - `levels`: Details of each level in a multi-level image provided as an array of objects, requires libvips compiled with support for OpenSlide\n * - `subifds`: Number of Sub Image File Directories in an OME-TIFF image\n * - `background`: Default background colour, if present, for PNG (bKGD) and GIF images, either an RGB Object or a single greyscale value\n * - `compression`: The encoder used to compress an HEIF file, `av1` (AVIF) or `hevc` (HEIC)\n * - `resolutionUnit`: The unit of resolution (density), either `inch` or `cm`, if present\n * - `hasProfile`: Boolean indicating the presence of an embedded ICC profile\n * - `hasAlpha`: Boolean indicating the presence of an alpha transparency channel\n * - `orientation`: Number value of the EXIF Orientation header, if present\n * - `exif`: Buffer containing raw EXIF data, if present\n * - `icc`: Buffer containing raw [ICC](https://www.npmjs.com/package/icc) profile data, if present\n * - `iptc`: Buffer containing raw IPTC data, if present\n * - `xmp`: Buffer containing raw XMP data, if present\n * - `tifftagPhotoshop`: Buffer containing raw TIFFTAG_PHOTOSHOP data, if present\n *\n * @example\n * const metadata = await sharp(input).metadata();\n *\n * @example\n * const image = sharp(inputJpg);\n * image\n *   .metadata()\n *   .then(function(metadata) {\n *     return image\n *       .resize(Math.round(metadata.width / 2))\n *       .webp()\n *       .toBuffer();\n *   })\n *   .then(function(data) {\n *     // data contains a WebP image half the width and height of the original JPEG\n *   });\n *\n * @example\n * // Based on EXIF rotation metadata, get the right-side-up width and height:\n *\n * const size = getNormalSize(await sharp(input).metadata());\n *\n * function getNormalSize({ width, height, orientation }) {\n *   return (orientation || 0) >= 5\n *     ? { width: height, height: width }\n *     : { width, height };\n * }\n *\n * @param {Function} [callback] - called with the arguments `(err, metadata)`\n * @returns {Promise<Object>|Sharp}\n */\nfunction metadata (callback) {\n  if (is.fn(callback)) {\n    if (this._isStreamInput()) {\n      this.on('finish', () => {\n        this._flattenBufferIn();\n        sharp.metadata(this.options, callback);\n      });\n    } else {\n      sharp.metadata(this.options, callback);\n    }\n    return this;\n  } else {\n    if (this._isStreamInput()) {\n      return new Promise((resolve, reject) => {\n        this.on('finish', () => {\n          this._flattenBufferIn();\n          sharp.metadata(this.options, (err, metadata) => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(metadata);\n            }\n          });\n        });\n      });\n    } else {\n      return new Promise((resolve, reject) => {\n        sharp.metadata(this.options, (err, metadata) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(metadata);\n          }\n        });\n      });\n    }\n  }\n}\n\n/**\n * Access to pixel-derived image statistics for every channel in the image.\n * A `Promise` is returned when `callback` is not provided.\n *\n * - `channels`: Array of channel statistics for each channel in the image. Each channel statistic contains\n *     - `min` (minimum value in the channel)\n *     - `max` (maximum value in the channel)\n *     - `sum` (sum of all values in a channel)\n *     - `squaresSum` (sum of squared values in a channel)\n *     - `mean` (mean of the values in a channel)\n *     - `stdev` (standard deviation for the values in a channel)\n *     - `minX` (x-coordinate of one of the pixel where the minimum lies)\n *     - `minY` (y-coordinate of one of the pixel where the minimum lies)\n *     - `maxX` (x-coordinate of one of the pixel where the maximum lies)\n *     - `maxY` (y-coordinate of one of the pixel where the maximum lies)\n * - `isOpaque`: Is the image fully opaque? Will be `true` if the image has no alpha channel or if every pixel is fully opaque.\n * - `entropy`: Histogram-based estimation of greyscale entropy, discarding alpha channel if any.\n * - `sharpness`: Estimation of greyscale sharpness based on the standard deviation of a Laplacian convolution, discarding alpha channel if any.\n * - `dominant`: Object containing most dominant sRGB colour based on a 4096-bin 3D histogram.\n *\n * **Note**: Statistics are derived from the original input image. Any operations performed on the image must first be\n * written to a buffer in order to run `stats` on the result (see third example).\n *\n * @example\n * const image = sharp(inputJpg);\n * image\n *   .stats()\n *   .then(function(stats) {\n *      // stats contains the channel-wise statistics array and the isOpaque value\n *   });\n *\n * @example\n * const { entropy, sharpness, dominant } = await sharp(input).stats();\n * const { r, g, b } = dominant;\n *\n * @example\n * const image = sharp(input);\n * // store intermediate result\n * const part = await image.extract(region).toBuffer();\n * // create new instance to obtain statistics of extracted region\n * const stats = await sharp(part).stats();\n *\n * @param {Function} [callback] - called with the arguments `(err, stats)`\n * @returns {Promise<Object>}\n */\nfunction stats (callback) {\n  if (is.fn(callback)) {\n    if (this._isStreamInput()) {\n      this.on('finish', () => {\n        this._flattenBufferIn();\n        sharp.stats(this.options, callback);\n      });\n    } else {\n      sharp.stats(this.options, callback);\n    }\n    return this;\n  } else {\n    if (this._isStreamInput()) {\n      return new Promise((resolve, reject) => {\n        this.on('finish', function () {\n          this._flattenBufferIn();\n          sharp.stats(this.options, (err, stats) => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(stats);\n            }\n          });\n        });\n      });\n    } else {\n      return new Promise((resolve, reject) => {\n        sharp.stats(this.options, (err, stats) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(stats);\n          }\n        });\n      });\n    }\n  }\n}\n\n/**\n * Decorate the Sharp prototype with input-related functions.\n * @private\n */\nmodule.exports = function (Sharp) {\n  Object.assign(Sharp.prototype, {\n    // Private\n    _inputOptionsFromObject,\n    _createInputDescriptor,\n    _write,\n    _flattenBufferIn,\n    _isStreamInput,\n    // Public\n    metadata,\n    stats\n  });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}