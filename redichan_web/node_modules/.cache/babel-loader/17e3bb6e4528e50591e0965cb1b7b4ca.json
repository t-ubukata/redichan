{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst events = require('events');\nconst detectLibc = require('detect-libc');\nconst is = require('./is');\nconst platformAndArch = require('./platform')();\nconst sharp = require('./sharp');\n\n/**\n * An Object containing nested boolean values representing the available input and output formats/methods.\n * @member\n * @example\n * console.log(sharp.format);\n * @returns {Object}\n */\nconst format = sharp.format();\n\n/**\n * An Object containing the available interpolators and their proper values\n * @readonly\n * @enum {string}\n */\nconst interpolators = {\n  /** [Nearest neighbour interpolation](http://en.wikipedia.org/wiki/Nearest-neighbor_interpolation). Suitable for image enlargement only. */\n  nearest: 'nearest',\n  /** [Bilinear interpolation](http://en.wikipedia.org/wiki/Bilinear_interpolation). Faster than bicubic but with less smooth results. */\n  bilinear: 'bilinear',\n  /** [Bicubic interpolation](http://en.wikipedia.org/wiki/Bicubic_interpolation) (the default). */\n  bicubic: 'bicubic',\n  /** [LBB interpolation](https://github.com/libvips/libvips/blob/master/libvips/resample/lbb.cpp#L100). Prevents some \"[acutance](http://en.wikipedia.org/wiki/Acutance)\" but typically reduces performance by a factor of 2. */\n  locallyBoundedBicubic: 'lbb',\n  /** [Nohalo interpolation](http://eprints.soton.ac.uk/268086/). Prevents acutance but typically reduces performance by a factor of 3. */\n  nohalo: 'nohalo',\n  /** [VSQBS interpolation](https://github.com/libvips/libvips/blob/master/libvips/resample/vsqbs.cpp#L48). Prevents \"staircasing\" when enlarging. */\n  vertexSplitQuadraticBasisSpline: 'vsqbs'\n};\n\n/**\n * An Object containing the version numbers of libvips and its dependencies.\n * @member\n * @example\n * console.log(sharp.versions);\n */\nlet versions = {\n  vips: sharp.libvipsVersion()\n};\ntry {\n  versions = require(`../vendor/${versions.vips}/${platformAndArch}/versions.json`);\n} catch (_err) {/* ignore */}\n\n/**\n * An Object containing the platform and architecture\n * of the current and installed vendored binaries.\n * @member\n * @example\n * console.log(sharp.vendor);\n */\nconst vendor = {\n  current: platformAndArch,\n  installed: []\n};\ntry {\n  vendor.installed = fs.readdirSync(path.join(__dirname, `../vendor/${versions.vips}`));\n} catch (_err) {/* ignore */}\n\n/**\n * Gets or, when options are provided, sets the limits of _libvips'_ operation cache.\n * Existing entries in the cache will be trimmed after any change in limits.\n * This method always returns cache statistics,\n * useful for determining how much working memory is required for a particular task.\n *\n * @example\n * const stats = sharp.cache();\n * @example\n * sharp.cache( { items: 200 } );\n * sharp.cache( { files: 0 } );\n * sharp.cache(false);\n *\n * @param {Object|boolean} [options=true] - Object with the following attributes, or boolean where true uses default cache settings and false removes all caching\n * @param {number} [options.memory=50] - is the maximum memory in MB to use for this cache\n * @param {number} [options.files=20] - is the maximum number of files to hold open\n * @param {number} [options.items=100] - is the maximum number of operations to cache\n * @returns {Object}\n */\nfunction cache(options) {\n  if (is.bool(options)) {\n    if (options) {\n      // Default cache settings of 50MB, 20 files, 100 items\n      return sharp.cache(50, 20, 100);\n    } else {\n      return sharp.cache(0, 0, 0);\n    }\n  } else if (is.object(options)) {\n    return sharp.cache(options.memory, options.files, options.items);\n  } else {\n    return sharp.cache();\n  }\n}\ncache(true);\n\n/**\n * Gets or, when a concurrency is provided, sets\n * the maximum number of threads _libvips_ should use to process _each image_.\n * These are from a thread pool managed by glib,\n * which helps avoid the overhead of creating new threads.\n *\n * This method always returns the current concurrency.\n *\n * The default value is the number of CPU cores,\n * except when using glibc-based Linux without jemalloc,\n * where the default is `1` to help reduce memory fragmentation.\n *\n * A value of `0` will reset this to the number of CPU cores.\n *\n * Some image format libraries spawn additional threads,\n * e.g. libaom manages its own 4 threads when encoding AVIF images,\n * and these are independent of the value set here.\n *\n * The maximum number of images that sharp can process in parallel\n * is controlled by libuv's `UV_THREADPOOL_SIZE` environment variable,\n * which defaults to 4.\n *\n * https://nodejs.org/api/cli.html#uv_threadpool_sizesize\n *\n * For example, by default, a machine with 8 CPU cores will process\n * 4 images in parallel and use up to 8 threads per image,\n * so there will be up to 32 concurrent threads.\n *\n * @example\n * const threads = sharp.concurrency(); // 4\n * sharp.concurrency(2); // 2\n * sharp.concurrency(0); // 4\n *\n * @param {number} [concurrency]\n * @returns {number} concurrency\n */\nfunction concurrency(concurrency) {\n  return sharp.concurrency(is.integer(concurrency) ? concurrency : null);\n}\n/* istanbul ignore next */\nif (detectLibc.familySync() === detectLibc.GLIBC && !sharp._isUsingJemalloc()) {\n  // Reduce default concurrency to 1 when using glibc memory allocator\n  sharp.concurrency(1);\n}\n\n/**\n * An EventEmitter that emits a `change` event when a task is either:\n * - queued, waiting for _libuv_ to provide a worker thread\n * - complete\n * @member\n * @example\n * sharp.queue.on('change', function(queueLength) {\n *   console.log('Queue contains ' + queueLength + ' task(s)');\n * });\n */\nconst queue = new events.EventEmitter();\n\n/**\n * Provides access to internal task counters.\n * - queue is the number of tasks this module has queued waiting for _libuv_ to provide a worker thread from its pool.\n * - process is the number of resize tasks currently being processed.\n *\n * @example\n * const counters = sharp.counters(); // { queue: 2, process: 4 }\n *\n * @returns {Object}\n */\nfunction counters() {\n  return sharp.counters();\n}\n\n/**\n * Get and set use of SIMD vector unit instructions.\n * Requires libvips to have been compiled with liborc support.\n *\n * Improves the performance of `resize`, `blur` and `sharpen` operations\n * by taking advantage of the SIMD vector unit of the CPU, e.g. Intel SSE and ARM NEON.\n *\n * @example\n * const simd = sharp.simd();\n * // simd is `true` if the runtime use of liborc is currently enabled\n * @example\n * const simd = sharp.simd(false);\n * // prevent libvips from using liborc at runtime\n *\n * @param {boolean} [simd=true]\n * @returns {boolean}\n */\nfunction simd(simd) {\n  return sharp.simd(is.bool(simd) ? simd : null);\n}\nsimd(true);\n\n/**\n * Decorate the Sharp class with utility-related functions.\n * @private\n */\nmodule.exports = function (Sharp) {\n  Sharp.cache = cache;\n  Sharp.concurrency = concurrency;\n  Sharp.counters = counters;\n  Sharp.simd = simd;\n  Sharp.format = format;\n  Sharp.interpolators = interpolators;\n  Sharp.versions = versions;\n  Sharp.vendor = vendor;\n  Sharp.queue = queue;\n};","map":{"version":3,"names":["fs","require","path","events","detectLibc","is","platformAndArch","sharp","format","interpolators","nearest","bilinear","bicubic","locallyBoundedBicubic","nohalo","vertexSplitQuadraticBasisSpline","versions","vips","libvipsVersion","_err","vendor","current","installed","readdirSync","join","__dirname","cache","options","bool","object","memory","files","items","concurrency","integer","familySync","GLIBC","_isUsingJemalloc","queue","EventEmitter","counters","simd","module","exports","Sharp"],"sources":["/Users/admin/project/redichan_frontend/node_modules/sharp/lib/utility.js"],"sourcesContent":["'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst events = require('events');\nconst detectLibc = require('detect-libc');\n\nconst is = require('./is');\nconst platformAndArch = require('./platform')();\nconst sharp = require('./sharp');\n\n/**\n * An Object containing nested boolean values representing the available input and output formats/methods.\n * @member\n * @example\n * console.log(sharp.format);\n * @returns {Object}\n */\nconst format = sharp.format();\n\n/**\n * An Object containing the available interpolators and their proper values\n * @readonly\n * @enum {string}\n */\nconst interpolators = {\n  /** [Nearest neighbour interpolation](http://en.wikipedia.org/wiki/Nearest-neighbor_interpolation). Suitable for image enlargement only. */\n  nearest: 'nearest',\n  /** [Bilinear interpolation](http://en.wikipedia.org/wiki/Bilinear_interpolation). Faster than bicubic but with less smooth results. */\n  bilinear: 'bilinear',\n  /** [Bicubic interpolation](http://en.wikipedia.org/wiki/Bicubic_interpolation) (the default). */\n  bicubic: 'bicubic',\n  /** [LBB interpolation](https://github.com/libvips/libvips/blob/master/libvips/resample/lbb.cpp#L100). Prevents some \"[acutance](http://en.wikipedia.org/wiki/Acutance)\" but typically reduces performance by a factor of 2. */\n  locallyBoundedBicubic: 'lbb',\n  /** [Nohalo interpolation](http://eprints.soton.ac.uk/268086/). Prevents acutance but typically reduces performance by a factor of 3. */\n  nohalo: 'nohalo',\n  /** [VSQBS interpolation](https://github.com/libvips/libvips/blob/master/libvips/resample/vsqbs.cpp#L48). Prevents \"staircasing\" when enlarging. */\n  vertexSplitQuadraticBasisSpline: 'vsqbs'\n};\n\n/**\n * An Object containing the version numbers of libvips and its dependencies.\n * @member\n * @example\n * console.log(sharp.versions);\n */\nlet versions = {\n  vips: sharp.libvipsVersion()\n};\ntry {\n  versions = require(`../vendor/${versions.vips}/${platformAndArch}/versions.json`);\n} catch (_err) { /* ignore */ }\n\n/**\n * An Object containing the platform and architecture\n * of the current and installed vendored binaries.\n * @member\n * @example\n * console.log(sharp.vendor);\n */\nconst vendor = {\n  current: platformAndArch,\n  installed: []\n};\ntry {\n  vendor.installed = fs.readdirSync(path.join(__dirname, `../vendor/${versions.vips}`));\n} catch (_err) { /* ignore */ }\n\n/**\n * Gets or, when options are provided, sets the limits of _libvips'_ operation cache.\n * Existing entries in the cache will be trimmed after any change in limits.\n * This method always returns cache statistics,\n * useful for determining how much working memory is required for a particular task.\n *\n * @example\n * const stats = sharp.cache();\n * @example\n * sharp.cache( { items: 200 } );\n * sharp.cache( { files: 0 } );\n * sharp.cache(false);\n *\n * @param {Object|boolean} [options=true] - Object with the following attributes, or boolean where true uses default cache settings and false removes all caching\n * @param {number} [options.memory=50] - is the maximum memory in MB to use for this cache\n * @param {number} [options.files=20] - is the maximum number of files to hold open\n * @param {number} [options.items=100] - is the maximum number of operations to cache\n * @returns {Object}\n */\nfunction cache (options) {\n  if (is.bool(options)) {\n    if (options) {\n      // Default cache settings of 50MB, 20 files, 100 items\n      return sharp.cache(50, 20, 100);\n    } else {\n      return sharp.cache(0, 0, 0);\n    }\n  } else if (is.object(options)) {\n    return sharp.cache(options.memory, options.files, options.items);\n  } else {\n    return sharp.cache();\n  }\n}\ncache(true);\n\n/**\n * Gets or, when a concurrency is provided, sets\n * the maximum number of threads _libvips_ should use to process _each image_.\n * These are from a thread pool managed by glib,\n * which helps avoid the overhead of creating new threads.\n *\n * This method always returns the current concurrency.\n *\n * The default value is the number of CPU cores,\n * except when using glibc-based Linux without jemalloc,\n * where the default is `1` to help reduce memory fragmentation.\n *\n * A value of `0` will reset this to the number of CPU cores.\n *\n * Some image format libraries spawn additional threads,\n * e.g. libaom manages its own 4 threads when encoding AVIF images,\n * and these are independent of the value set here.\n *\n * The maximum number of images that sharp can process in parallel\n * is controlled by libuv's `UV_THREADPOOL_SIZE` environment variable,\n * which defaults to 4.\n *\n * https://nodejs.org/api/cli.html#uv_threadpool_sizesize\n *\n * For example, by default, a machine with 8 CPU cores will process\n * 4 images in parallel and use up to 8 threads per image,\n * so there will be up to 32 concurrent threads.\n *\n * @example\n * const threads = sharp.concurrency(); // 4\n * sharp.concurrency(2); // 2\n * sharp.concurrency(0); // 4\n *\n * @param {number} [concurrency]\n * @returns {number} concurrency\n */\nfunction concurrency (concurrency) {\n  return sharp.concurrency(is.integer(concurrency) ? concurrency : null);\n}\n/* istanbul ignore next */\nif (detectLibc.familySync() === detectLibc.GLIBC && !sharp._isUsingJemalloc()) {\n  // Reduce default concurrency to 1 when using glibc memory allocator\n  sharp.concurrency(1);\n}\n\n/**\n * An EventEmitter that emits a `change` event when a task is either:\n * - queued, waiting for _libuv_ to provide a worker thread\n * - complete\n * @member\n * @example\n * sharp.queue.on('change', function(queueLength) {\n *   console.log('Queue contains ' + queueLength + ' task(s)');\n * });\n */\nconst queue = new events.EventEmitter();\n\n/**\n * Provides access to internal task counters.\n * - queue is the number of tasks this module has queued waiting for _libuv_ to provide a worker thread from its pool.\n * - process is the number of resize tasks currently being processed.\n *\n * @example\n * const counters = sharp.counters(); // { queue: 2, process: 4 }\n *\n * @returns {Object}\n */\nfunction counters () {\n  return sharp.counters();\n}\n\n/**\n * Get and set use of SIMD vector unit instructions.\n * Requires libvips to have been compiled with liborc support.\n *\n * Improves the performance of `resize`, `blur` and `sharpen` operations\n * by taking advantage of the SIMD vector unit of the CPU, e.g. Intel SSE and ARM NEON.\n *\n * @example\n * const simd = sharp.simd();\n * // simd is `true` if the runtime use of liborc is currently enabled\n * @example\n * const simd = sharp.simd(false);\n * // prevent libvips from using liborc at runtime\n *\n * @param {boolean} [simd=true]\n * @returns {boolean}\n */\nfunction simd (simd) {\n  return sharp.simd(is.bool(simd) ? simd : null);\n}\nsimd(true);\n\n/**\n * Decorate the Sharp class with utility-related functions.\n * @private\n */\nmodule.exports = function (Sharp) {\n  Sharp.cache = cache;\n  Sharp.concurrency = concurrency;\n  Sharp.counters = counters;\n  Sharp.simd = simd;\n  Sharp.format = format;\n  Sharp.interpolators = interpolators;\n  Sharp.versions = versions;\n  Sharp.vendor = vendor;\n  Sharp.queue = queue;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}