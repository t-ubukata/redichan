{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SVG = void 0;\nconst svgReg = /<svg\\s([^>\"']|\"[^\"]*\"|'[^']*')*>/;\nconst extractorRegExps = {\n  height: /\\sheight=(['\"])([^%]+?)\\1/,\n  root: svgReg,\n  viewbox: /\\sviewBox=(['\"])(.+?)\\1/i,\n  width: /\\swidth=(['\"])([^%]+?)\\1/\n};\nconst INCH_CM = 2.54;\nconst units = {\n  in: 96,\n  cm: 96 / INCH_CM,\n  em: 16,\n  ex: 8,\n  m: 96 / INCH_CM * 100,\n  mm: 96 / INCH_CM / 10,\n  pc: 96 / 72 / 12,\n  pt: 96 / 72,\n  px: 1\n};\nconst unitsReg = new RegExp(`^([0-9.]+(?:e\\\\d+)?)(${Object.keys(units).join('|')})?$`);\nfunction parseLength(len) {\n  const m = unitsReg.exec(len);\n  if (!m) {\n    return undefined;\n  }\n  return Math.round(Number(m[1]) * (units[m[2]] || 1));\n}\nfunction parseViewbox(viewbox) {\n  const bounds = viewbox.split(' ');\n  return {\n    height: parseLength(bounds[3]),\n    width: parseLength(bounds[2])\n  };\n}\nfunction parseAttributes(root) {\n  const width = root.match(extractorRegExps.width);\n  const height = root.match(extractorRegExps.height);\n  const viewbox = root.match(extractorRegExps.viewbox);\n  return {\n    height: height && parseLength(height[2]),\n    viewbox: viewbox && parseViewbox(viewbox[2]),\n    width: width && parseLength(width[2])\n  };\n}\nfunction calculateByDimensions(attrs) {\n  return {\n    height: attrs.height,\n    width: attrs.width\n  };\n}\nfunction calculateByViewbox(attrs, viewbox) {\n  const ratio = viewbox.width / viewbox.height;\n  if (attrs.width) {\n    return {\n      height: Math.floor(attrs.width / ratio),\n      width: attrs.width\n    };\n  }\n  if (attrs.height) {\n    return {\n      height: attrs.height,\n      width: Math.floor(attrs.height * ratio)\n    };\n  }\n  return {\n    height: viewbox.height,\n    width: viewbox.width\n  };\n}\nexports.SVG = {\n  validate(buffer) {\n    const str = String(buffer);\n    return svgReg.test(str);\n  },\n  calculate(buffer) {\n    const root = buffer.toString('utf8').match(extractorRegExps.root);\n    if (root) {\n      const attrs = parseAttributes(root[0]);\n      if (attrs.width && attrs.height) {\n        return calculateByDimensions(attrs);\n      }\n      if (attrs.viewbox) {\n        return calculateByViewbox(attrs, attrs.viewbox);\n      }\n    }\n    throw new TypeError('Invalid SVG');\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","SVG","svgReg","extractorRegExps","height","root","viewbox","width","INCH_CM","units","in","cm","em","ex","m","mm","pc","pt","px","unitsReg","RegExp","keys","join","parseLength","len","exec","undefined","Math","round","Number","parseViewbox","bounds","split","parseAttributes","match","calculateByDimensions","attrs","calculateByViewbox","ratio","floor","validate","buffer","str","String","test","calculate","toString","TypeError"],"sources":["/Users/admin/project/redichan_frontend/node_modules/image-size/dist/types/svg.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SVG = void 0;\nconst svgReg = /<svg\\s([^>\"']|\"[^\"]*\"|'[^']*')*>/;\nconst extractorRegExps = {\n    height: /\\sheight=(['\"])([^%]+?)\\1/,\n    root: svgReg,\n    viewbox: /\\sviewBox=(['\"])(.+?)\\1/i,\n    width: /\\swidth=(['\"])([^%]+?)\\1/,\n};\nconst INCH_CM = 2.54;\nconst units = {\n    in: 96,\n    cm: 96 / INCH_CM,\n    em: 16,\n    ex: 8,\n    m: 96 / INCH_CM * 100,\n    mm: 96 / INCH_CM / 10,\n    pc: 96 / 72 / 12,\n    pt: 96 / 72,\n    px: 1\n};\nconst unitsReg = new RegExp(`^([0-9.]+(?:e\\\\d+)?)(${Object.keys(units).join('|')})?$`);\nfunction parseLength(len) {\n    const m = unitsReg.exec(len);\n    if (!m) {\n        return undefined;\n    }\n    return Math.round(Number(m[1]) * (units[m[2]] || 1));\n}\nfunction parseViewbox(viewbox) {\n    const bounds = viewbox.split(' ');\n    return {\n        height: parseLength(bounds[3]),\n        width: parseLength(bounds[2])\n    };\n}\nfunction parseAttributes(root) {\n    const width = root.match(extractorRegExps.width);\n    const height = root.match(extractorRegExps.height);\n    const viewbox = root.match(extractorRegExps.viewbox);\n    return {\n        height: height && parseLength(height[2]),\n        viewbox: viewbox && parseViewbox(viewbox[2]),\n        width: width && parseLength(width[2]),\n    };\n}\nfunction calculateByDimensions(attrs) {\n    return {\n        height: attrs.height,\n        width: attrs.width,\n    };\n}\nfunction calculateByViewbox(attrs, viewbox) {\n    const ratio = viewbox.width / viewbox.height;\n    if (attrs.width) {\n        return {\n            height: Math.floor(attrs.width / ratio),\n            width: attrs.width,\n        };\n    }\n    if (attrs.height) {\n        return {\n            height: attrs.height,\n            width: Math.floor(attrs.height * ratio),\n        };\n    }\n    return {\n        height: viewbox.height,\n        width: viewbox.width,\n    };\n}\nexports.SVG = {\n    validate(buffer) {\n        const str = String(buffer);\n        return svgReg.test(str);\n    },\n    calculate(buffer) {\n        const root = buffer.toString('utf8').match(extractorRegExps.root);\n        if (root) {\n            const attrs = parseAttributes(root[0]);\n            if (attrs.width && attrs.height) {\n                return calculateByDimensions(attrs);\n            }\n            if (attrs.viewbox) {\n                return calculateByViewbox(attrs, attrs.viewbox);\n            }\n        }\n        throw new TypeError('Invalid SVG');\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}