{"ast":null,"code":"var _jsxFileName = \"/Users/admin/project/redichan_frontend/src/Board.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport RedichanNav from 'RedichanNav';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Stack from 'react-bootstrap/Stack';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport consola from 'consola';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Board = () => {\n  _s();\n  const [enThreadsLatest, setEnThreadsLatest] = useState(new Array());\n  useEffect(() => {\n    const fetchEnThreadsLatest = async () => {\n      const response = await fetch('http://localhost:4000/board-en-news-threads-latest');\n      const result = await response.json();\n      setEnThreadsLatest(result);\n    };\n    fetchEnThreadsLatest().catch(err => consola.error(err));\n  }, []);\n  const [jaThreadsLatest, setJaThreadsLatest] = useState(new Array());\n  useEffect(() => {\n    const fetchJaThreadsLatest = async () => {\n      const response = await fetch('http://localhost:4000/board-ja-news-threads-latest');\n      const result = await response.json();\n      setJaThreadsLatest(result);\n    };\n    fetchJaThreadsLatest().catch(err => consola.error(err));\n  }, []);\n\n  // TODO: Use fetched data.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Board mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(RedichanNav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Stack, {\n      className: \"mb-5\",\n      children: enThreadsLatest.map(thread => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-light border\",\n        children: \"thread.zeroPost\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Navbar, {\n      bg: \"light\",\n      variant: \"light\",\n      fixed: \"bottom\",\n      children: /*#__PURE__*/_jsxDEV(Nav, {\n        className: \"ms-auto\",\n        children: [/*#__PURE__*/_jsxDEV(Nav.Link, {\n          href: \"#search\",\n          children: \"\\uD83D\\uDD0D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Nav.Link, {\n          href: \"#start-a-thread\",\n          children: \"\\u2795\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(Board, \"NMlIFYoV6IoJAqEjsFmZPURwNxc=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useState","useEffect","RedichanNav","Stack","Nav","Navbar","consola","Board","enThreadsLatest","setEnThreadsLatest","Array","fetchEnThreadsLatest","response","fetch","result","json","catch","err","error","jaThreadsLatest","setJaThreadsLatest","fetchJaThreadsLatest","map","thread"],"sources":["/Users/admin/project/redichan_frontend/src/Board.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport RedichanNav from 'RedichanNav';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Stack from 'react-bootstrap/Stack';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport consola from 'consola';\n\ninterface Thread {\n  id: number,\n  poster: string,\n  zeroPost: string,\n  attachmentPath: string,\n  postNumber: number,\n  UTCTimestamp: Date\n}\n\nconst Board = (): JSX.Element => {\n  const [enThreadsLatest, setEnThreadsLatest] = useState(new Array<Thread>());\n\n  useEffect(() => {\n    const fetchEnThreadsLatest = async () => {\n      const response = await fetch('http://localhost:4000/board-en-news-threads-latest');\n      const result = (await response.json()) as Array<Thread>;\n      setEnThreadsLatest(result);\n    };\n    fetchEnThreadsLatest().catch((err) => consola.error(err));\n  }, []);\n\n  const [jaThreadsLatest, setJaThreadsLatest] = useState(new Array<Thread>());\n\n  useEffect(() => {\n    const fetchJaThreadsLatest = async () => {\n      const response = await fetch('http://localhost:4000/board-ja-news-threads-latest');\n      const result = (await response.json()) as Array<Thread>;\n      setJaThreadsLatest(result);\n    };\n    fetchJaThreadsLatest().catch((err) => consola.error(err));\n  }, []);\n\n  // TODO: Use fetched data.\n  return (\n    <div className=\"Board mx-auto\">\n      <RedichanNav />\n      <Stack className=\"mb-5\">\n        {enThreadsLatest.map((thread) => (\n          <div className=\"bg-light border\">\n            thread.zeroPost\n          </div>\n        ))}\n      </Stack>\n      <Navbar bg=\"light\" variant=\"light\" fixed=\"bottom\">\n        <Nav className=\"ms-auto\">\n          <Nav.Link href=\"#search\">üîç</Nav.Link>\n          <Nav.Link href=\"#start-a-thread\">‚ûï</Nav.Link>\n        </Nav>\n      </Navbar>\n    </div>\n  );\n};\n\nexport default Board;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,WAAW,MAAM,aAAa;AACrC,OAAO,sCAAsC;AAC7C,OAAOC,KAAK,MAAM,uBAAuB;AAIzC,OAAOC,GAAG,MAAM,qBAAqB;AACrC,OAAOC,MAAM,MAAM,wBAAwB;AAC3C,OAAOC,OAAO,MAAM,SAAS;AAAC;AAW9B,MAAMC,KAAK,GAAG,MAAmB;EAAA;EAC/B,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAC,IAAIU,KAAK,EAAU,CAAC;EAE3ET,SAAS,CAAC,MAAM;IACd,MAAMU,oBAAoB,GAAG,YAAY;MACvC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oDAAoD,CAAC;MAClF,MAAMC,MAAM,GAAI,MAAMF,QAAQ,CAACG,IAAI,EAAoB;MACvDN,kBAAkB,CAACK,MAAM,CAAC;IAC5B,CAAC;IACDH,oBAAoB,EAAE,CAACK,KAAK,CAAEC,GAAG,IAAKX,OAAO,CAACY,KAAK,CAACD,GAAG,CAAC,CAAC;EAC3D,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM,CAACE,eAAe,EAAEC,kBAAkB,CAAC,GAAGpB,QAAQ,CAAC,IAAIU,KAAK,EAAU,CAAC;EAE3ET,SAAS,CAAC,MAAM;IACd,MAAMoB,oBAAoB,GAAG,YAAY;MACvC,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,oDAAoD,CAAC;MAClF,MAAMC,MAAM,GAAI,MAAMF,QAAQ,CAACG,IAAI,EAAoB;MACvDK,kBAAkB,CAACN,MAAM,CAAC;IAC5B,CAAC;IACDO,oBAAoB,EAAE,CAACL,KAAK,CAAEC,GAAG,IAAKX,OAAO,CAACY,KAAK,CAACD,GAAG,CAAC,CAAC;EAC3D,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,oBACE;IAAK,SAAS,EAAC,eAAe;IAAA,wBAC5B,QAAC,WAAW;MAAA;MAAA;MAAA;IAAA,QAAG,eACf,QAAC,KAAK;MAAC,SAAS,EAAC,MAAM;MAAA,UACpBT,eAAe,CAACc,GAAG,CAAEC,MAAM,iBAC1B;QAAK,SAAS,EAAC,iBAAiB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAGjC;IAAC;MAAA;MAAA;MAAA;IAAA,QACI,eACR,QAAC,MAAM;MAAC,EAAE,EAAC,OAAO;MAAC,OAAO,EAAC,OAAO;MAAC,KAAK,EAAC,QAAQ;MAAA,uBAC/C,QAAC,GAAG;QAAC,SAAS,EAAC,SAAS;QAAA,wBACtB,QAAC,GAAG,CAAC,IAAI;UAAC,IAAI,EAAC,SAAS;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAc,eACtC,QAAC,GAAG,CAAC,IAAI;UAAC,IAAI,EAAC,iBAAiB;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAa;MAAA;QAAA;QAAA;QAAA;MAAA;IACzC;MAAA;MAAA;MAAA;IAAA,QACC;EAAA;IAAA;IAAA;IAAA;EAAA,QACL;AAEV,CAAC;AAAC,GA1CIhB,KAAK;AAAA,KAALA,KAAK;AA4CX,eAAeA,KAAK;AAAC;AAAA"},"metadata":{},"sourceType":"module"}