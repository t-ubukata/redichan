{"ast":null,"code":"'use strict';\n\nconst color = require('color');\nconst is = require('./is');\n\n/**\n * Colourspaces.\n * @private\n */\nconst colourspace = {\n  multiband: 'multiband',\n  'b-w': 'b-w',\n  bw: 'b-w',\n  cmyk: 'cmyk',\n  srgb: 'srgb'\n};\n\n/**\n * Tint the image using the provided chroma while preserving the image luminance.\n * An alpha channel may be present and will be unchanged by the operation.\n *\n * @example\n * const output = await sharp(input)\n *   .tint({ r: 255, g: 240, b: 16 })\n *   .toBuffer();\n *\n * @param {string|Object} rgb - parsed by the [color](https://www.npmjs.org/package/color) module to extract chroma values.\n * @returns {Sharp}\n * @throws {Error} Invalid parameter\n */\nfunction tint(rgb) {\n  const colour = color(rgb);\n  this.options.tintA = colour.a();\n  this.options.tintB = colour.b();\n  return this;\n}\n\n/**\n * Convert to 8-bit greyscale; 256 shades of grey.\n * This is a linear operation. If the input image is in a non-linear colour space such as sRGB, use `gamma()` with `greyscale()` for the best results.\n * By default the output image will be web-friendly sRGB and contain three (identical) color channels.\n * This may be overridden by other sharp operations such as `toColourspace('b-w')`,\n * which will produce an output image containing one color channel.\n * An alpha channel may be present, and will be unchanged by the operation.\n *\n * @example\n * const output = await sharp(input).greyscale().toBuffer();\n *\n * @param {Boolean} [greyscale=true]\n * @returns {Sharp}\n */\nfunction greyscale(greyscale) {\n  this.options.greyscale = is.bool(greyscale) ? greyscale : true;\n  return this;\n}\n\n/**\n * Alternative spelling of `greyscale`.\n * @param {Boolean} [grayscale=true]\n * @returns {Sharp}\n */\nfunction grayscale(grayscale) {\n  return this.greyscale(grayscale);\n}\n\n/**\n * Set the pipeline colourspace.\n *\n * The input image will be converted to the provided colourspace at the start of the pipeline.\n * All operations will use this colourspace before converting to the output colourspace, as defined by {@link toColourspace}.\n *\n * This feature is experimental and has not yet been fully-tested with all operations.\n *\n * @since 0.29.0\n *\n * @example\n * // Run pipeline in 16 bits per channel RGB while converting final result to 8 bits per channel sRGB.\n * await sharp(input)\n *  .pipelineColourspace('rgb16')\n *  .toColourspace('srgb')\n *  .toFile('16bpc-pipeline-to-8bpc-output.png')\n *\n * @param {string} [colourspace] - pipeline colourspace e.g. `rgb16`, `scrgb`, `lab`, `grey16` [...](https://github.com/libvips/libvips/blob/41cff4e9d0838498487a00623462204eb10ee5b8/libvips/iofuncs/enumtypes.c#L774)\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction pipelineColourspace(colourspace) {\n  if (!is.string(colourspace)) {\n    throw is.invalidParameterError('colourspace', 'string', colourspace);\n  }\n  this.options.colourspaceInput = colourspace;\n  return this;\n}\n\n/**\n * Alternative spelling of `pipelineColourspace`.\n * @param {string} [colorspace] - pipeline colorspace.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction pipelineColorspace(colorspace) {\n  return this.pipelineColourspace(colorspace);\n}\n\n/**\n * Set the output colourspace.\n * By default output image will be web-friendly sRGB, with additional channels interpreted as alpha channels.\n *\n * @example\n * // Output 16 bits per pixel RGB\n * await sharp(input)\n *  .toColourspace('rgb16')\n *  .toFile('16-bpp.png')\n *\n * @param {string} [colourspace] - output colourspace e.g. `srgb`, `rgb`, `cmyk`, `lab`, `b-w` [...](https://github.com/libvips/libvips/blob/3c0bfdf74ce1dc37a6429bed47fa76f16e2cd70a/libvips/iofuncs/enumtypes.c#L777-L794)\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction toColourspace(colourspace) {\n  if (!is.string(colourspace)) {\n    throw is.invalidParameterError('colourspace', 'string', colourspace);\n  }\n  this.options.colourspace = colourspace;\n  return this;\n}\n\n/**\n * Alternative spelling of `toColourspace`.\n * @param {string} [colorspace] - output colorspace.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction toColorspace(colorspace) {\n  return this.toColourspace(colorspace);\n}\n\n/**\n * Update a colour attribute of the this.options Object.\n * @private\n * @param {string} key\n * @param {string|Object} value\n * @throws {Error} Invalid value\n */\nfunction _setBackgroundColourOption(key, value) {\n  if (is.defined(value)) {\n    if (is.object(value) || is.string(value)) {\n      const colour = color(value);\n      this.options[key] = [colour.red(), colour.green(), colour.blue(), Math.round(colour.alpha() * 255)];\n    } else {\n      throw is.invalidParameterError('background', 'object or string', value);\n    }\n  }\n}\n\n/**\n * Decorate the Sharp prototype with colour-related functions.\n * @private\n */\nmodule.exports = function (Sharp) {\n  Object.assign(Sharp.prototype, {\n    // Public\n    tint,\n    greyscale,\n    grayscale,\n    pipelineColourspace,\n    pipelineColorspace,\n    toColourspace,\n    toColorspace,\n    // Private\n    _setBackgroundColourOption\n  });\n  // Class attributes\n  Sharp.colourspace = colourspace;\n  Sharp.colorspace = colourspace;\n};","map":{"version":3,"names":["color","require","is","colourspace","multiband","bw","cmyk","srgb","tint","rgb","colour","options","tintA","a","tintB","b","greyscale","bool","grayscale","pipelineColourspace","string","invalidParameterError","colourspaceInput","pipelineColorspace","colorspace","toColourspace","toColorspace","_setBackgroundColourOption","key","value","defined","object","red","green","blue","Math","round","alpha","module","exports","Sharp","Object","assign","prototype"],"sources":["/Users/admin/project/redichan_frontend/node_modules/sharp/lib/colour.js"],"sourcesContent":["'use strict';\n\nconst color = require('color');\nconst is = require('./is');\n\n/**\n * Colourspaces.\n * @private\n */\nconst colourspace = {\n  multiband: 'multiband',\n  'b-w': 'b-w',\n  bw: 'b-w',\n  cmyk: 'cmyk',\n  srgb: 'srgb'\n};\n\n/**\n * Tint the image using the provided chroma while preserving the image luminance.\n * An alpha channel may be present and will be unchanged by the operation.\n *\n * @example\n * const output = await sharp(input)\n *   .tint({ r: 255, g: 240, b: 16 })\n *   .toBuffer();\n *\n * @param {string|Object} rgb - parsed by the [color](https://www.npmjs.org/package/color) module to extract chroma values.\n * @returns {Sharp}\n * @throws {Error} Invalid parameter\n */\nfunction tint (rgb) {\n  const colour = color(rgb);\n  this.options.tintA = colour.a();\n  this.options.tintB = colour.b();\n  return this;\n}\n\n/**\n * Convert to 8-bit greyscale; 256 shades of grey.\n * This is a linear operation. If the input image is in a non-linear colour space such as sRGB, use `gamma()` with `greyscale()` for the best results.\n * By default the output image will be web-friendly sRGB and contain three (identical) color channels.\n * This may be overridden by other sharp operations such as `toColourspace('b-w')`,\n * which will produce an output image containing one color channel.\n * An alpha channel may be present, and will be unchanged by the operation.\n *\n * @example\n * const output = await sharp(input).greyscale().toBuffer();\n *\n * @param {Boolean} [greyscale=true]\n * @returns {Sharp}\n */\nfunction greyscale (greyscale) {\n  this.options.greyscale = is.bool(greyscale) ? greyscale : true;\n  return this;\n}\n\n/**\n * Alternative spelling of `greyscale`.\n * @param {Boolean} [grayscale=true]\n * @returns {Sharp}\n */\nfunction grayscale (grayscale) {\n  return this.greyscale(grayscale);\n}\n\n/**\n * Set the pipeline colourspace.\n *\n * The input image will be converted to the provided colourspace at the start of the pipeline.\n * All operations will use this colourspace before converting to the output colourspace, as defined by {@link toColourspace}.\n *\n * This feature is experimental and has not yet been fully-tested with all operations.\n *\n * @since 0.29.0\n *\n * @example\n * // Run pipeline in 16 bits per channel RGB while converting final result to 8 bits per channel sRGB.\n * await sharp(input)\n *  .pipelineColourspace('rgb16')\n *  .toColourspace('srgb')\n *  .toFile('16bpc-pipeline-to-8bpc-output.png')\n *\n * @param {string} [colourspace] - pipeline colourspace e.g. `rgb16`, `scrgb`, `lab`, `grey16` [...](https://github.com/libvips/libvips/blob/41cff4e9d0838498487a00623462204eb10ee5b8/libvips/iofuncs/enumtypes.c#L774)\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction pipelineColourspace (colourspace) {\n  if (!is.string(colourspace)) {\n    throw is.invalidParameterError('colourspace', 'string', colourspace);\n  }\n  this.options.colourspaceInput = colourspace;\n  return this;\n}\n\n/**\n * Alternative spelling of `pipelineColourspace`.\n * @param {string} [colorspace] - pipeline colorspace.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction pipelineColorspace (colorspace) {\n  return this.pipelineColourspace(colorspace);\n}\n\n/**\n * Set the output colourspace.\n * By default output image will be web-friendly sRGB, with additional channels interpreted as alpha channels.\n *\n * @example\n * // Output 16 bits per pixel RGB\n * await sharp(input)\n *  .toColourspace('rgb16')\n *  .toFile('16-bpp.png')\n *\n * @param {string} [colourspace] - output colourspace e.g. `srgb`, `rgb`, `cmyk`, `lab`, `b-w` [...](https://github.com/libvips/libvips/blob/3c0bfdf74ce1dc37a6429bed47fa76f16e2cd70a/libvips/iofuncs/enumtypes.c#L777-L794)\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction toColourspace (colourspace) {\n  if (!is.string(colourspace)) {\n    throw is.invalidParameterError('colourspace', 'string', colourspace);\n  }\n  this.options.colourspace = colourspace;\n  return this;\n}\n\n/**\n * Alternative spelling of `toColourspace`.\n * @param {string} [colorspace] - output colorspace.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction toColorspace (colorspace) {\n  return this.toColourspace(colorspace);\n}\n\n/**\n * Update a colour attribute of the this.options Object.\n * @private\n * @param {string} key\n * @param {string|Object} value\n * @throws {Error} Invalid value\n */\nfunction _setBackgroundColourOption (key, value) {\n  if (is.defined(value)) {\n    if (is.object(value) || is.string(value)) {\n      const colour = color(value);\n      this.options[key] = [\n        colour.red(),\n        colour.green(),\n        colour.blue(),\n        Math.round(colour.alpha() * 255)\n      ];\n    } else {\n      throw is.invalidParameterError('background', 'object or string', value);\n    }\n  }\n}\n\n/**\n * Decorate the Sharp prototype with colour-related functions.\n * @private\n */\nmodule.exports = function (Sharp) {\n  Object.assign(Sharp.prototype, {\n    // Public\n    tint,\n    greyscale,\n    grayscale,\n    pipelineColourspace,\n    pipelineColorspace,\n    toColourspace,\n    toColorspace,\n    // Private\n    _setBackgroundColourOption\n  });\n  // Class attributes\n  Sharp.colourspace = colourspace;\n  Sharp.colorspace = colourspace;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}