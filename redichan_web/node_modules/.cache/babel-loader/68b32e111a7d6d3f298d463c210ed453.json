{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PNM = void 0;\nconst PNMTypes = {\n  P1: 'pbm/ascii',\n  P2: 'pgm/ascii',\n  P3: 'ppm/ascii',\n  P4: 'pbm',\n  P5: 'pgm',\n  P6: 'ppm',\n  P7: 'pam',\n  PF: 'pfm'\n};\nconst Signatures = Object.keys(PNMTypes);\nconst handlers = {\n  default: lines => {\n    let dimensions = [];\n    while (lines.length > 0) {\n      const line = lines.shift();\n      if (line[0] === '#') {\n        continue;\n      }\n      dimensions = line.split(' ');\n      break;\n    }\n    if (dimensions.length === 2) {\n      return {\n        height: parseInt(dimensions[1], 10),\n        width: parseInt(dimensions[0], 10)\n      };\n    } else {\n      throw new TypeError('Invalid PNM');\n    }\n  },\n  pam: lines => {\n    const size = {};\n    while (lines.length > 0) {\n      const line = lines.shift();\n      if (line.length > 16 || line.charCodeAt(0) > 128) {\n        continue;\n      }\n      const [key, value] = line.split(' ');\n      if (key && value) {\n        size[key.toLowerCase()] = parseInt(value, 10);\n      }\n      if (size.height && size.width) {\n        break;\n      }\n    }\n    if (size.height && size.width) {\n      return {\n        height: size.height,\n        width: size.width\n      };\n    } else {\n      throw new TypeError('Invalid PAM');\n    }\n  }\n};\nexports.PNM = {\n  validate(buffer) {\n    const signature = buffer.toString('ascii', 0, 2);\n    return Signatures.includes(signature);\n  },\n  calculate(buffer) {\n    const signature = buffer.toString('ascii', 0, 2);\n    const type = PNMTypes[signature];\n    // TODO: this probably generates garbage. move to a stream based parser\n    const lines = buffer.toString('ascii', 3).split(/[\\r\\n]+/);\n    const handler = handlers[type] || handlers.default;\n    return handler(lines);\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","PNM","PNMTypes","P1","P2","P3","P4","P5","P6","P7","PF","Signatures","keys","handlers","default","lines","dimensions","length","line","shift","split","height","parseInt","width","TypeError","pam","size","charCodeAt","key","toLowerCase","validate","buffer","signature","toString","includes","calculate","type","handler"],"sources":["/Users/admin/project/redichan_frontend/node_modules/image-size/dist/types/pnm.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PNM = void 0;\nconst PNMTypes = {\n    P1: 'pbm/ascii',\n    P2: 'pgm/ascii',\n    P3: 'ppm/ascii',\n    P4: 'pbm',\n    P5: 'pgm',\n    P6: 'ppm',\n    P7: 'pam',\n    PF: 'pfm'\n};\nconst Signatures = Object.keys(PNMTypes);\nconst handlers = {\n    default: (lines) => {\n        let dimensions = [];\n        while (lines.length > 0) {\n            const line = lines.shift();\n            if (line[0] === '#') {\n                continue;\n            }\n            dimensions = line.split(' ');\n            break;\n        }\n        if (dimensions.length === 2) {\n            return {\n                height: parseInt(dimensions[1], 10),\n                width: parseInt(dimensions[0], 10),\n            };\n        }\n        else {\n            throw new TypeError('Invalid PNM');\n        }\n    },\n    pam: (lines) => {\n        const size = {};\n        while (lines.length > 0) {\n            const line = lines.shift();\n            if (line.length > 16 || line.charCodeAt(0) > 128) {\n                continue;\n            }\n            const [key, value] = line.split(' ');\n            if (key && value) {\n                size[key.toLowerCase()] = parseInt(value, 10);\n            }\n            if (size.height && size.width) {\n                break;\n            }\n        }\n        if (size.height && size.width) {\n            return {\n                height: size.height,\n                width: size.width\n            };\n        }\n        else {\n            throw new TypeError('Invalid PAM');\n        }\n    }\n};\nexports.PNM = {\n    validate(buffer) {\n        const signature = buffer.toString('ascii', 0, 2);\n        return Signatures.includes(signature);\n    },\n    calculate(buffer) {\n        const signature = buffer.toString('ascii', 0, 2);\n        const type = PNMTypes[signature];\n        // TODO: this probably generates garbage. move to a stream based parser\n        const lines = buffer.toString('ascii', 3).split(/[\\r\\n]+/);\n        const handler = handlers[type] || handlers.default;\n        return handler(lines);\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}